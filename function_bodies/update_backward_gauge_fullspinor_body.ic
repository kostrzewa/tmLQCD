// update_backward_gauge_fullspinor_body

  int ix=0, kb=0, kb2=0;

#ifdef OMP
#pragma omp for
#endif
  for(ix = 0; ix < VOLUME/2; ix++) {
    kb2=g_eo2lexic[ix];
    _su3_assign(g_gauge_field_copy[ix][0],gf[kb2][0]);
    kb=g_idn[g_eo2lexic[ix]][0];
    _su3_assign(g_gauge_field_copy[ix][1],gf[kb][0]);

    _su3_assign(g_gauge_field_copy[ix][2],gf[kb2][1]);
    kb=g_idn[g_eo2lexic[ix]][1];
    _su3_assign(g_gauge_field_copy[ix][3],gf[kb][1]);

    _su3_assign(g_gauge_field_copy[ix][4],gf[kb2][2]);
    kb=g_idn[g_eo2lexic[ix]][2];
    _su3_assign(g_gauge_field_copy[ix][5],gf[kb][2]);

    _su3_assign(g_gauge_field_copy[ix][6],gf[kb2][3]);
    kb=g_idn[g_eo2lexic[ix]][3];
    _su3_assign(g_gauge_field_copy[ix][7],gf[kb][3]);
  }
#ifdef OMP
#pragma omp for
#endif
  for(ix = (VOLUME+RAND)/2; ix < (VOLUME+RAND)/2+VOLUME/2; ix++) {
    kb2=g_eo2lexic[ix];
    _su3_assign(g_gauge_field_copy[ix][0],gf[kb2][0]);
    kb=g_idn[g_eo2lexic[ix]][0];
    _su3_assign(g_gauge_field_copy[ix][1],gf[kb][0]);

    _su3_assign(g_gauge_field_copy[ix][2],gf[kb2][1]);
    kb=g_idn[g_eo2lexic[ix]][1];
    _su3_assign(g_gauge_field_copy[ix][3],gf[kb][1]);

    _su3_assign(g_gauge_field_copy[ix][4],gf[kb2][2]);
    kb=g_idn[g_eo2lexic[ix]][2];
    _su3_assign(g_gauge_field_copy[ix][5],gf[kb][2]);

    _su3_assign(g_gauge_field_copy[ix][6],gf[kb2][3]);
    kb=g_idn[g_eo2lexic[ix]][3];
    _su3_assign(g_gauge_field_copy[ix][7],gf[kb][3]);
  }
