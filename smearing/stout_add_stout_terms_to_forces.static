static void add_stout_terms_to_forces(gauge_field_t smeared_force, double const rho, stout_notes_tuple *trace, gauge_field_t const V, gauge_field_t const U)
{
  su3 ALIGN t1;
  su3 ALIGN t2;
  su3 ALIGN t3;
  su3 ALIGN C_der;
  
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int mu = 0; mu < 4; ++mu)
    {     
      /* t3 = i * C^+ * Lambda */
      generic_staples(&t1, x, mu, U); 
      _su3d_times_su3(t2, t1, trace[x][mu].Z);
      _complex_times_su3(t3, I*rho, t2); /* NOTE C contains rho!*/
     
      /* t1 = exp(A) = exp(iQ) = V * U^+ */
      _su3_times_su3d(t1, V[x][mu], U[x][mu]);
      
      /* t2 = Sigma * exp(A) */
      _su3_times_su3(t2, trace[x][mu].Sigma, t1);
          
      /* smeared_force = Sigma*exp(iQ) + i * C^+ * Lambda */
      _su3_plus_su3(smeared_force[x][mu],t2,t3);

      /* This completes the first half of our calculation -- note that smeared_force can be overwritten.
         The data it contained is encapsulated in trace->Sigma at this point. */
      
      /* Six lines in the derivation document eq 75 in P&M -- mirrored here */
      _su3_zero(C_der);
      for (unsigned int nu = 0; nu < 4; ++nu)
      {
        if (mu != nu)
        {
          unsigned int xmnu = g_idn[x][nu];
          unsigned int xpnu = g_iup[x][nu];
          unsigned int xpmu = g_iup[x][mu];
          unsigned int xmnu_pmu = g_idn[ xpmu ][nu];

          /* Three of the lines are all pre- and post-multiplied by the same matrices eventually 
                we can aggregate them first*/
                        
          /* Line 2 */
          _su3d_times_su3(t1,U[xmnu][mu],trace[xmnu][mu].Z);

          /* Line 3 */
          _su3_times_su3d_acc(t1,trace[xmnu_pmu][nu].Z,U[xmnu][mu]); 

          /* Line 4 */
          _su3d_times_su3(t2,U[xmnu][mu],trace[xmnu][nu].Z);
          _su3_refac_acc(t1,-1.0,t2);
          
          /* Now the multiplications */
          _su3d_times_su3(t3,U[xmnu_pmu][nu],t2);
          _su3_times_su3(C_der,t3,U[xmnu][nu]);
                    
                    
          /* Lines 1 and 6 are pre-multiplied by the two same matrices */
          /* Line 1 */
          _su3d_times_su3(t1,U[x][nu],trace[x][nu].Z);
                    
          /* Line 1 + Line 6 */
          _su3_times_su3d_acc(t1,trace[xpnu][mu].Z,U[x][nu]);
          
          /* Multiply by common factors and add to C_der */
          _su3d_times_su3(t2,U[xpnu][mu],t1);
          _su3_times_su3_acc(C_der,U[xpmu][nu],t2);
          
          /* Line 5 */
          _su3d_times_su3d(t1,U[xpnu][mu],U[x][nu]);
          _su3_times_su3(t2,U[xpmu][nu],t1);
          _su3_times_su3(t3,trace[xpmu][nu].Z,t2);
          _su3_refac_acc(C_der,-1.0,t3);
        }
      }
      /* Now add this second half of the calculation to the smeared forces, no projection is necessary */
      _su3_imfac_acc(smeared_force[x][mu], -1.0*rho, C_der);
    }
    
  generic_exchange(&smeared_force, sizeof(su3_tuple));
}
